# .github/workflows/**main.yml**
# название воркфлоу
name: Django-app workflow
# https://docs.github.com/en/actions/creating-actions/about-custom-actions#
# types-of-actions

# воркфлоу включается по событию push, можно также задавать параметры пуша
# см. пример ниже.
# другие события смотри
# https://docs.github.com/en/actions/reference/events-that-trigger-workflows
on: 
  push:
    # branches: [ main ]

jobs:
  tests:
    # «Раннер» — создание изолированного окружения с последней версией Ubuntu 
    runs-on: ubuntu-latest  # runs-on (ключ) - базовый слой (в терминологии
    # Docker) или runner в терминлогии GitHub Actions

    steps:  # ключ шаги
    # Запуск actions checkout — готового скрипта 
    # для клонирования репозитория
    # Вместо run можно применять uses — для вызова actions. Actions — это
    # скрипты, которые можно написать заранее и вызывать по имени из разных
    # workflow.
    - uses: actions/checkout@v2
    - name: Set up Python  # имя шага (произвольное, смысл!)
      # Запуск actions setup-python — готового скрипта 
      # для развёртывания окружения Python
      uses: actions/setup-python@v2
      with:
        # Выбор версии Python
        python-version: 3.7

    - name: Install dependencies
      # в ключе run записываются команды для терминала окружения
      run: | # | - символ последовательного выполнения
        # обновление pip
        python -m pip install --upgrade pip 
        # установка flake8 и его плагинов
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        # установка зависимостей
        pip install -r requirements.txt 

    - name: Test with flake8 and django tests
      run: |
        # запуск проверки проекта по flake8
        python -m flake8
        # перейти в папку, содержащую manage.py — 
        #<корневая_папка_infra_actions>/<папка_проекта>/manage.py
        cd infra_project/
        # запустить написанные разработчиком тесты
        python manage.py test

  # Сразу после них добавьте новую задачу: деплой приложения
  build_and_push_to_docker_hub:
      name: Push Docker image to Docker Hub
      runs-on: ubuntu-latest
      needs: tests
      steps:
        - name: Check out the repo
          # Проверка доступности репозитория Docker Hub для workflow
          uses: actions/checkout@v2 
        - name: Set up Docker Buildx
          # Вызов сборщика контейнеров docker
          uses: docker/setup-buildx-action@v1 
        - name: Login to Docker 
          # Запуск скрипта авторизации на Docker Hub
          uses: docker/login-action@v1 
          with:
            # Секреты задаются/храняться в настройках репы житхаб (на житхабе,
            # в репу, settings, secrets)
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
        - name: Push to Docker Hub
          # Пуш образа в Docker Hub 
          uses: docker/build-push-action@v2 
          with:
            push: true
            tags: atakoi/infra_actions:latest
  deploy:
      runs-on: ubuntu-latest
      needs: build_and_push_to_docker_hub
      steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          # Секреты задаются/храняться в настройках репы житхаб (на житхабе,
          # в репу, settings, secrets)
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          # passphrase: ${{ secrets.PASSPHRASE }} # Если ваш ssh-ключ защищён фразой-паролем
          script: |
            # Выполняет pull образа с DockerHub
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/infra_actions
            #остановка всех контейнеров
            sudo docker stop $(sudo docker ps -a -q)
            sudo docker run --rm -d -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/infra_actions

#____________________________________________________________________________________________
# # This is a basic workflow to help you get started with Actions

# name: CI

# # Controls when the action will run. Triggers the workflow on push or pull request
# # events but only for the master branch
# on:
#   push:
#     branches: [ main ]  # можно указать и несколько веток
#   pull_request:  # сработает, когда кто-то сделает запрос на изменение кода в ветке main
#     branches: [ main ]

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   # This workflow contains a single job called "build"
#   build:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#     - uses: actions/checkout@v2

#     # Runs a Single command using the runners shell
#     - name: Run a one-line script
#       run: echo Hello, world!

#     # Runs a set of commands using the runners shell
#     - name: Run a multi-line script
#       run: |
#         echo Add other actions to build,
#         echo test, and deploy your project.


#____________________________________________________________________________________________
# # This is a basic workflow that is manually triggered

# name: Manual workflow

# # Controls when the action will run. Workflow runs when manually triggered using the UI
# # or API.
# on:
#   workflow_dispatch:
#     # Inputs the workflow accepts.
#     inputs:
#       name:
#         # Friendly description to be shown in the UI instead of 'name'
#         description: 'Person to greet'
#         # Default value if no value is explicitly provided
#         default: 'World'
#         # Input has to be provided for the workflow to run
#         required: true

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   # This workflow contains a single job called "greet"
#   greet:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#     # Runs a single command using the runners shell
#     - name: Send greeting
#       run: echo "Hello ${{ github.event.inputs.name }}"
